# This is a basic workflow to help you get started with Actions

name: Hi, Action

# Controls when the workflow will run
on:
  # Triggers the workflow
  issues:
    types: [opened, reopened, edited]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  execute_job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Pre task
        uses: actions/github-script@v7.0.1
        with:
          script: |
            console.log(context)
          
            const issueNumber = context.issue.number;
            const labelToAdd = "task pending";
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: [labelToAdd]
            });

            console.log("Issue Number: ", context.issue.number)
            console.log("Issue Title: ", context.issue.title)
            console.log("Issue Description: ", context.issue.body)
            
      # - name: Get issue info
      #   run: |
      #     echo "Issue Number: ${{ github.event.issue.number }}"
      #     echo "Issue Title: ${{ github.event.issue.title }}"
      #     echo "Issue Description: ${{ github.event.issue.body }}"
        
      - name: Setup workspace
        run: |
          echo "The current workspace is under: "
          pwd
          mkdir tmp
          pip install wget
          pip install nltk

      - name: Write issue body to file
        run: |
            cat << EOF > tmp/issue_body.txt
            ${{ github.event.issue.body }}
            EOF
            cat tmp/issue_body.txt
            
      - name: Upload the issue body file
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: artifact-issue-${{ github.event.issue.number }}
          path: tmp/*.txt

      - name: Output artifact URL
        run:  echo "Artifact URL is $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}"

      - name: Post the artifact URL by comment if succeed
        if: steps.artifact-upload-step.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            #### ðŸŽ‰ Task executed successfully. Here is the artifact download URL:
            [artifact-issue-${{ github.event.issue.number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }})
          reactions: '+1'

      - name: Add sorry comment if failed
        if: steps.artifact-upload-step.outcome != 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue edit ${{ github.event.issue.number }} --remove-label "task pending"
          gh issue edit ${{ github.event.issue.number }} --add-label "task failed"
          gh issue comment ${{ github.event.issue.number }} --body "ðŸ˜¢ Sorry for the failure"
          
      # - name: Close Issue
      #   env:
      #       GH_TOKEN: ${{ github.token }}
      #   run: |
      #     gh issue edit ${{ github.event.issue.number }} --remove-label "task pending"
      #     gh issue edit ${{ github.event.issue.number }} --add-label "task failed"
      #     gh issue close ${{ github.event.issue.number }} --comment "âœ” Task completed, and close ticket." --reason "completed"

      - name: Close Issue
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const issueNumber = context.issue.number;
            
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              name: 'task pending'
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['task completed']
            });

            const completedComment = `> ${context.issue.body}` + "\nâœ” Task completed, and close ticket.";
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: completedComment
            });

